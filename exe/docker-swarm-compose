#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'docker/swarm/compose'

program :name, 'docker-swarm-compose'
program :version, Docker::Swarm::Compose::VERSION
program :description, 'Docker client program for composing on a Docker Swarm'

command :build do |c|
  c.syntax = 'docker-swarm-compose build [options]'
  c.summary = 'Builds images required for running a composed application'
  c.description = <<-EOT
Uses the service build specifications to prepare the images required to run
this application. In the absence of a shared Docker registry, this command
must be run on all machines that are part of the target swarm.
  EOT
  c.example 'Default usage', 'docker-swarm-compose build'
  c.option '--parallel', 'build services in parallel'
  c.option '--push DEST', String, 'target registry to push the built images to'
  c.option '--pull SRC', String, 'source registry to pull the images from instead of building'
  c.when_called Docker::Swarm::Compose::Commands::Build, :run
end

command :up do |c|
  c.syntax = 'docker-swarm-compose up [options]'
  c.summary = 'Instantiate a composed application'
  c.description = <<-EOT
Creates service, network and volume instances to run the application defined
in the Docker Compose file. Images must have been beforehand on all hosts that
are part of the swarm, using the `docker-swarm-compose build` command.
  EOT
  c.example 'Default usage', 'docker-swarm-compose up'
  c.option '--skip-services SERVICES', Array, 'comma-separated list of services to skip while starting'
  c.when_called Docker::Swarm::Compose::Commands::Up, :run
end

command :down do |c|
  c.syntax = 'docker-swarm-compose down [options]'
  c.summary = 'Terminate a composed application'
  c.description = <<-EOT
Terminates service, network and volume instances that have been created by the
`docker-swarm-compose up` command.
  EOT
  c.example 'Default usage', 'docker-swarm-compose down'
  c.when_called Docker::Swarm::Compose::Commands::Down, :run
end

